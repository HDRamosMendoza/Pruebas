{"version":3,"sources":["../../../../widgets/InfoSummary2/setting/UniqueLayerChooser.js"],"names":["define","declare","lang","Deferred","LayerChooserFromMap","parent","row","constructor","options","mixin","postMixInProperties","inherited","arguments","filter","hitch","andCombineFilters","_customFilter","layerInfo","unSupportedLayerTypes","def","isTable","resolve","res","used_layers","getLayerType","then","type","indexOf","layerID","id","unsupported_ids"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAAC,oBAAD,EAAuB,iBAAvB,EAA0C,eAA1C,EAA2D,gCAA3D,CAAP,EAAqG,UAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,mBAAnC,EAAwD;AAC3J,SAAOH,QAAQ,CAACG,mBAAD,CAAR,EAA+B;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,YAAQ,IAb4B;AAcpCC,SAAK,IAd+B;;AAgBpCC,iBAAa,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AACzCN,WAAKO,KAAL,CAAW,IAAX,EAAiBD,OAAjB;AACD,KAlBmC;;AAoBpCE,yBAAqB,SAASA,mBAAT,GAA+B;AAClD,WAAKC,SAAL,CAAeC,SAAf;AACA,WAAKC,MAAL,GAAcX,KAAKY,KAAL,CAAW,IAAX,EAAiBV,oBAAoBW,iBAApB,CAAsC,CAAC,KAAKF,MAAN,EAAcX,KAAKY,KAAL,CAAW,IAAX,EAAiB,KAAKE,aAAtB,CAAd,CAAtC,CAAjB,CAAd;AACD,KAvBmC;;AAyBpCA,mBAAe,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AAC/C;AACA;AACA;AACA,UAAIC,wBAAwB,CAAC,UAAD,EAAa,yBAAb,EAAwC,+BAAxC,EAAyE,4BAAzE,EAAuG,cAAvG,CAA5B;;AAEA;AACA;AACA,UAAIC,MAAM,IAAIhB,QAAJ,EAAV;AACA,UAAIc,UAAUG,OAAd,EAAuB;AACrBD,YAAIE,OAAJ,CAAY,KAAZ;AACD,OAFD,MAEO;AACL,YAAIC,MAAM,IAAV;AACA,YAAI,KAAKjB,MAAL,IAAe,KAAKA,MAAL,CAAYkB,WAA/B,EAA4C;AAC1C;AACA;AACA;AACAN,oBAAUO,YAAV,GAAyBC,IAAzB,CAA8BvB,KAAKY,KAAL,CAAW,IAAX,EAAiB,UAAUY,IAAV,EAAgB;AAC7D,gBAAIR,sBAAsBS,OAAtB,CAA8BD,IAA9B,IAAsC,CAAC,CAA3C,EAA8C;AAC5CJ,oBAAM,KAAN;AACD,aAFD,MAEO;AACL,kBAAI,KAAKhB,GAAL,CAASsB,OAAT,KAAqBX,UAAUY,EAAnC,EAAuC;AACrCP,sBAAM,KAAKjB,MAAL,CAAYkB,WAAZ,CAAwBI,OAAxB,CAAgCV,UAAUY,EAA1C,MAAkD,CAAC,CAAnD,IAAwD,KAAKxB,MAAL,CAAYyB,eAAZ,CAA4BH,OAA5B,CAAoCV,UAAUY,EAA9C,MAAsD,CAAC,CAArH;AACD;AACF;AACDV,gBAAIE,OAAJ,CAAYC,GAAZ;AACD,WAT6B,CAA9B;AAUD;AACF;AACD,aAAOH,GAAP;AACD;AAvDmC,GAA/B,CAAP;AAyDD,CA1DD;AA2DA","file":"UniqueLayerChooser.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////\n// Copyright Â© 2014 - 2018 Esri. All Rights Reserved.\n//\n// Licensed under the Apache License Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n///////////////////////////////////////////////////////////////////////////\n\ndefine(['dojo/_base/declare', 'dojo/_base/lang', 'dojo/Deferred', 'jimu/dijit/LayerChooserFromMap'], function (declare, lang, Deferred, LayerChooserFromMap) {\n  return declare([LayerChooserFromMap], {\n\n    //public methods:\n    //getSelectedItems return [{name, url, layerInfo}]\n\n    //attributes\n    //parent: the parent widget\n    // expects the parent to store a list called 'used_layers' that will contain all\n    // layerIds that have already been used\n    //row: the row that stores the chooser\n    // The row must maintain a 'layerID' value for the layer that is currently selected in its chooser\n    // (Not implemented...does not work if layer is not subLayer)The row must maintain a 'rowOpened' property that indicates if the chooser has been expaned.\n\n    parent: null,\n    row: null,\n\n    constructor: function constructor(options) {\n      lang.mixin(this, options);\n    },\n\n    postMixInProperties: function postMixInProperties() {\n      this.inherited(arguments);\n      this.filter = lang.hitch(this, LayerChooserFromMap.andCombineFilters([this.filter, lang.hitch(this, this._customFilter)]));\n    },\n\n    _customFilter: function _customFilter(layerInfo) {\n      //The values have been filtered if this function runs\n      // and need to be refiltered when a new layer is chosen for another row\n      //This allows us to ensure that the same layer cannot be chosen for multiple rows\n      var unSupportedLayerTypes = [\"WMSLayer\", \"ArcGISImageServiceLayer\", \"ArcGISImageServiceVectorLayer\", \"ArcGISTiledMapServiceLayer\", \"ClusterLayer\"];\n\n      //This concept does not work when the layers are not subLayers\n      //this.row.rowOpened = true;\n      var def = new Deferred();\n      if (layerInfo.isTable) {\n        def.resolve(false);\n      } else {\n        var res = true;\n        if (this.parent && this.parent.used_layers) {\n          //show the layer if it's the id for this row\n          // this value needs to be set on the row each time the layer changes\n          //This also allows for a given parent to not be empty\n          layerInfo.getLayerType().then(lang.hitch(this, function (type) {\n            if (unSupportedLayerTypes.indexOf(type) > -1) {\n              res = false;\n            } else {\n              if (this.row.layerID !== layerInfo.id) {\n                res = this.parent.used_layers.indexOf(layerInfo.id) === -1 && this.parent.unsupported_ids.indexOf(layerInfo.id) === -1;\n              }\n            }\n            def.resolve(res);\n          }));\n        }\n      }\n      return def;\n    }\n  });\n});\n//# sourceMappingURL=UniqueLayerChooser.js.map\n"]}