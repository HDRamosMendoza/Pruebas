{"version":3,"sources":["../../../../widgets/InfoSummary/setting/UniqueLayerChooser.js"],"names":["define","declare","lang","Deferred","LayerChooserFromMap","parent","row","constructor","options","mixin","postMixInProperties","inherited","arguments","filter","hitch","andCombineFilters","_customFilter","layerInfo","unSupportedLayerTypes","def","isTable","resolve","res","used_layers","getLayerType","then","type","indexOf","layerID","id","unsupported_ids"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CACL,oBADK,EAEL,iBAFK,EAGL,eAHK,EAIL,gCAJK,CAAP,EAME,UAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,mBAAnC,EAAwD;AACtD,SAAOH,QAAQ,CAACG,mBAAD,CAAR,EAA+B;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,YAAQ,IAb4B;AAcpCC,SAAK,IAd+B;;AAgBpCC,iBAAa,qBAAUC,OAAV,EAAmB;AAC9BN,WAAKO,KAAL,CAAW,IAAX,EAAiBD,OAAjB;AACD,KAlBmC;;AAoBpCE,yBAAqB,+BAAY;AAC/B,WAAKC,SAAL,CAAeC,SAAf;AACA,WAAKC,MAAL,GAAcX,KAAKY,KAAL,CACZ,IADY,EAEZV,oBAAoBW,iBAApB,CAAsC,CAAC,KAAKF,MAAN,EAAcX,KAAKY,KAAL,CAAW,IAAX,EAAiB,KAAKE,aAAtB,CAAd,CAAtC,CAFY,CAAd;AAID,KA1BmC;;AA4BpCA,mBAAe,uBAAUC,SAAV,EAAqB;AAClC;AACA;AACA;AACA,UAAIC,wBAAwB,CAAC,UAAD,EAAa,yBAAb,EAC1B,+BAD0B,EACO,4BADP,EACqC,cADrC,CAA5B;;AAGA;AACA;AACA,UAAIC,MAAM,IAAIhB,QAAJ,EAAV;AACA,UAAIc,UAAUG,OAAd,EAAuB;AACrBD,YAAIE,OAAJ,CAAY,KAAZ;AACD,OAFD,MAEO;AACL,YAAIC,MAAM,IAAV;AACA,YAAI,KAAKjB,MAAL,IAAe,KAAKA,MAAL,CAAYkB,WAA/B,EAA4C;AAC1C;AACA;AACA;AACAN,oBAAUO,YAAV,GAAyBC,IAAzB,CAA8BvB,KAAKY,KAAL,CAAW,IAAX,EAAiB,UAAUY,IAAV,EAAgB;AAC7D,gBAAIR,sBAAsBS,OAAtB,CAA8BD,IAA9B,IAAsC,CAAC,CAA3C,EAA8C;AAC5CJ,oBAAM,KAAN;AACD,aAFD,MAEO;AACL,kBAAI,KAAKhB,GAAL,CAASsB,OAAT,KAAqBX,UAAUY,EAAnC,EAAuC;AACrCP,sBAAM,KAAKjB,MAAL,CAAYkB,WAAZ,CAAwBI,OAAxB,CAAgCV,UAAUY,EAA1C,MAAkD,CAAC,CAAnD,IACJ,KAAKxB,MAAL,CAAYyB,eAAZ,CAA4BH,OAA5B,CAAoCV,UAAUY,EAA9C,MAAsD,CAAC,CADzD;AAED;AACF;AACDV,gBAAIE,OAAJ,CAAYC,GAAZ;AACD,WAV6B,CAA9B;AAWD;AACF;AACD,aAAOH,GAAP;AACD;AA5DmC,GAA/B,CAAP;AA8DD,CArEH","file":"UniqueLayerChooser.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////\r\n// Copyright Â© 2014 - 2018 Esri. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\ndefine([\r\n  'dojo/_base/declare',\r\n  'dojo/_base/lang',\r\n  'dojo/Deferred',\r\n  'jimu/dijit/LayerChooserFromMap'\r\n],\r\n  function (declare, lang, Deferred, LayerChooserFromMap) {\r\n    return declare([LayerChooserFromMap], {\r\n\r\n      //public methods:\r\n      //getSelectedItems return [{name, url, layerInfo}]\r\n\r\n      //attributes\r\n      //parent: the parent widget\r\n      // expects the parent to store a list called 'used_layers' that will contain all\r\n      // layerIds that have already been used\r\n      //row: the row that stores the chooser\r\n      // The row must maintain a 'layerID' value for the layer that is currently selected in its chooser\r\n      // (Not implemented...does not work if layer is not subLayer)The row must maintain a 'rowOpened' property that indicates if the chooser has been expaned.\r\n\r\n      parent: null,\r\n      row: null,\r\n\r\n      constructor: function (options) {\r\n        lang.mixin(this, options);\r\n      },\r\n\r\n      postMixInProperties: function () {\r\n        this.inherited(arguments);\r\n        this.filter = lang.hitch(\r\n          this,\r\n          LayerChooserFromMap.andCombineFilters([this.filter, lang.hitch(this, this._customFilter)])\r\n        );\r\n      },\r\n\r\n      _customFilter: function (layerInfo) {\r\n        //The values have been filtered if this function runs\r\n        // and need to be refiltered when a new layer is chosen for another row\r\n        //This allows us to ensure that the same layer cannot be chosen for multiple rows\r\n        var unSupportedLayerTypes = [\"WMSLayer\", \"ArcGISImageServiceLayer\",\r\n          \"ArcGISImageServiceVectorLayer\", \"ArcGISTiledMapServiceLayer\", \"ClusterLayer\"];\r\n\r\n        //This concept does not work when the layers are not subLayers\r\n        //this.row.rowOpened = true;\r\n        var def = new Deferred();\r\n        if (layerInfo.isTable) {\r\n          def.resolve(false);\r\n        } else {\r\n          var res = true;\r\n          if (this.parent && this.parent.used_layers) {\r\n            //show the layer if it's the id for this row\r\n            // this value needs to be set on the row each time the layer changes\r\n            //This also allows for a given parent to not be empty\r\n            layerInfo.getLayerType().then(lang.hitch(this, function (type) {\r\n              if (unSupportedLayerTypes.indexOf(type) > -1) {\r\n                res = false;\r\n              } else {\r\n                if (this.row.layerID !== layerInfo.id) {\r\n                  res = this.parent.used_layers.indexOf(layerInfo.id) === -1 &&\r\n                    this.parent.unsupported_ids.indexOf(layerInfo.id) === -1;\r\n                }\r\n              }\r\n              def.resolve(res);\r\n            }));\r\n          }\r\n        }\r\n        return def;\r\n      }\r\n    });\r\n  });\r\n"]}